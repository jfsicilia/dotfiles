" Plugins loading {{{1
" ====================

" Not compatible with old versions of vi.
set nocompatible

" Avoid some security exploits by disabling modelines.
set modelines=0

" Bootstrap vim-plug if not present.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

" Load plugins.
call plug#begin()
" Solarized color theme.
Plug 'altercation/vim-colors-solarized'
" File explorer.
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" Comment helper plugin.
Plug 'tpope/vim-commentary'
" Easy motion plugin.
Plug 'easymotion/vim-easymotion'
" Surround text with ", ', {, [, ( and tags.
Plug 'tpope/vim-surround'
" Vim indent pluging.
Plug 'michaeljsmith/vim-indent-object'
" Sneak motion plugin.
Plug 'justinmk/vim-sneak'
" Decorate nerdtree with git state symbols.
Plug 'Xuyuanp/nerdtree-git-plugin'
" Plugin for git.
Plug 'tpope/vim-fugitive'
" Syntax checker.
Plug 'scrooloose/syntastic'
" Fuzzy finder.
Plug 'ctrlpvim/ctrlp.vim'
" Check folder differences.
Plug 'will133/vim-dirdiff'
" Cols to rows and viceversa.
Plug 'salsifis/vim-transpose'
" Vim info line and tabs.
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Bookmarks.
Plug 'MattesGroeger/vim-bookmarks'
" Show symbol in gutter for changes in file.
Plug 'airblade/vim-gitgutter'
" Tabs closing.
Plug 'jfsicilia/bclose'
" Indent lines.
Plug 'Yggdroot/indentLine'
" Snippets for vim.
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
" Easy grep access.
Plug '~/.vim/plugged/grep-operator'
" Faster grep.
Plug 'mileszs/ack.vim'
" Openscad syntax hightlighting.
Plug 'sirtaj/vim-openscad'
call plug#end()

" General settings {{{1
" =====================

" Set default dirs for undo, swap and backup.
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" do not keep a backup file, will use versions control instead
set nobackup

" writes new file, deletes old file, rename new file to old (more secure).
set nowritebackup

" keep 50 lines of command line history
set history=50

" show the cursor position all the time
set ruler

" Highlight current line.
set cursorline

" Always show 3 lines ahead when scrolling.
set scrolloff=3

" Set spelling languange.
set spelllang=es
" set spelllang=en_gb

" Set encoding
set encoding=utf-8

" Enable line numbering.
set nu
" Show file numbering relative to current line
set relativenumber

" Use the same symbols as TextMate for tabstops and EOLs when hidden chars
" are shown.
set listchars=tab:▸\ ,eol:¬

" Unnamed register bound to clipboard.
set clipboard+=unnamed

" Change default leader char.
let mapleader=','

" Tabs while span 2 spaces.
set tabstop=2
" Software tab.
set softtabstop=2
" Number of spaces used in indentation mode.
set shiftwidth=2
" Round indent to shiftwidth.
set shiftround
" Use of spaces instead of tabs.
set expandtab

" Autoindent.
set autoindent
set smartindent

" Shows vim current mode (insert, normal, visual, ...).
set showmode

" Show the command you are typing on the last line.
set showcmd

" When using tab on the commandline, it shows all options in a menu.
set wildmenu
set wildmode=list:longest

" No audio warnings.
set visualbell

" Set lazyredraw.
set lazyredraw

" Fast file scrolling.
set ttyfast

" Enables .un~ file to save all changes to the file and let undo them even
" after saving and closing file.
set undofile

" Allows to hide a buffer with changes not written to disk.
set hidden

" Disable folding
set nofoldenable

" Always show status line.
set laststatus=2

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" Switch cursor shape when in insert/normal mode.
let &t_SI = "\e[5 q"
let &t_EI = "\e[1 q"



" --------

" Set wrapping and max chars per line
set wrap linebreak nolist
" set textwidth=78

" Show symbol at end of line for wrapped lines.
set showbreak=↪

" Highlight column 79th.
set colorcolumn=79

" Search and substitution
" -----------------------

" Enables normal regexes (very magic). Don't activate very magic on substitute
" commands, prefered this workflow: first search and then :%s//replace/
nnoremap / /\v
vnoremap / /\v

" Ignore case and smartcase on searching.
set ignorecase
set smartcase

" Applies global substitution on line by default. No need to add g to the end
" of the subs string (:%s/foo/bar/g, now only type :%s/foo/bar/). To disable
" it, add g to the end of the subs string.
set gdefault

" do incremental searching
set incsearch
" Switch on highlighting the last used search pattern.
set hlsearch
set showmatch

" Vim color schemes
" -----------------

" By default, dark background.
set background=dark
" Solarized colorscheme
colorscheme solarized

" Commands {{{1
" =============

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made. Appended wincmd h to
" set focus on the window more likely to close.
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
    \ | wincmd p | diffthis | wincmd h

" Macros {{{1
" ===========

" Convert word to uppercase.
let @u='viWUW'

" Autocommand group {{{1
" ======================
augroup autoVIMRC
  autocmd!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " Syntax of these languages is fussy over tabs Vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab

  " Treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss setfiletype xml

  " When .vimrc is written, automatically source it. Refresh Airline
  " to light up correctly tabbar.
  autocmd BufWritePost .vimrc,vimrc.symlink source $MYVIMRC | AirlineRefresh

  " Use marker foldin for vim files.
  autocmd FileType vim setlocal foldmethod=marker

  " Use indent folding method for python.
  autocmd FileType python setlocal foldmethod=indent | setlocal foldnestmax=1

  " Don't use wrap on html files.
  autocmd BufNewFile,BufRead *.html setlocal nowrap

  " Toggle relative line number when entering/leaving editing.
  autocmd InsertEnter * :set norelativenumber
  autocmd InsertLeave * :set relativenumber

  " Toggle lines number to ease tracking of active window.
"  autocmd WinEnter * :set number | set relativenumber
"  autocmd WinLeave * :set norelativenumber | set nonumber

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
augroup END

" Custom shortcuts {{{1
" =====================

" Don't use Ex mode (Q by default enables it), use Q for formatting
" NOTE: Ex mode is like the command mode for batch processing.
nnoremap Q gq

" F1 is used for help.

" Set paste mode. Helps when pasting from other apps to allow 1to1 pastes.
set pastetoggle=<F2>

" Shortcut to rapidly toggle `set list` (enables/disables hidden chars).
nnoremap <silent> <F3> :set list!<CR>

" Deletes trailing whitespaces.
nnoremap <silent> <F4> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>
    \ :nohl<CR>

" Enables F5 to toggle between dark and light colorscheme.
call togglebg#map("<F5>")

" F7 and shift F7 to access changes in a diff.
nnoremap <F7> ]c
nnoremap <S-F7> [c

" Enables <C-n> to toggle search hightlighting.
let hlstate=0
nnoremap <C-n> :if (hlstate == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=1-hlstate<cr>

" Redefine d(delete), c(change), x(replace) sending text to void register.
nnoremap <leader>d "_d
nnoremap <leader>D "_D
nnoremap <leader>c "_c
nnoremap <leader>C "_C
nnoremap <leader>x "_x
nnoremap <leader>X "_X


" Enable/disable spelling.
nnoremap <silent> <leader>s :set spell!<CR>

" Fast .vimrc editing.
nnoremap <leader>v :e $MYVIMRC<CR>

" Note that remapping C-s requires flow control to be disabled
" (e.g. in .bashrc or .zshrc)
noremap <C-s> :w<CR>
inoremap <C-s> <C-o>:w<CR>

" Tab is more easy to access than % to match [, {, (, ...
nnoremap <tab> %
vnoremap <tab> %

" Set - to move lines downwards and _ to move lines upwards.
nnoremap - ddp
nnoremap _ ddkP

" <leader>a to select all file.
nnoremap <leader>a ggVG

" Moves right and left when in insert mode.
inoremap <c-l> <right>
inoremap <c-h> <left>

" Creates a line below current with same length and filled with '='.
nnoremap <leader>= YPjwv$r=0

" Allows line deleting in insert mode.
inoremap <c-d> <esc>ddi

" Use spacebar to toggle code folding.
" Create a manual code folding if foldmethod is manual or marker.
nnoremap <leader>f za
vnoremap <leader>f zf

" <leader>+[ or ] to indent forward or bacward.
nnoremap <leader>[ <<
nnoremap <leader>] >>
vnoremap <leader>[ <gv
vnoremap <leader>] >gv

" Insert blank line below or above without moving cursor.
nnoremap <silent> <leader>o :<C-u>call append(line("."),   repeat([""], v:count1))<CR>
nnoremap <silent> <leader>O :<C-u>call append(line(".")-1, repeat([""], v:count1))<CR>

" Chrome kind of tab selection.
noremap <C-tab> gt
noremap <C-S-tab> gT

" Use arrow to resize windows.
nnoremap <left> <C-w><
nnoremap <right> <C-w>>
nnoremap <up> <C-w>-
nnoremap <down> <C-w>+

" Easy duplicate lines.
nnoremap <leader>p Yp
nnoremap <leader>P YP

" Shortcuts to move arround windows.
nnoremap <leader>h <C-w>h
nnoremap <leader>l <C-w>l
nnoremap <leader>k <C-w>k
nnoremap <leader>j <C-w>j

" Fast access to prev/next buffer and last buffer switching.
nnoremap <leader>m :bp<CR>
nnoremap <leader>, :b#<CR>
nnoremap <leader>. :bn<CR>
" Show list of buffers and wait for user selection.
nnoremap <leader>/ :buffers<CR>:buffer<Space>


" Fast access to splitting window.
nnoremap <leader>- :sp<CR>
nnoremap <leader>\| :vs<CR>

" Easy file opening in current dir.
nnoremap <leader>ee :e <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>es :sp <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>ep :execute "rightbelow split " . bufname("#")<CR>

" Shortcuts for diff with original file.
nnoremap <Leader>do :DiffOrig<CR>
nnoremap <leader>dq :bd<CR>:diffoff!<CR>
" Diff between open windows.
nnoremap <leader>dt :windo diffthis<CR>
nnoremap <leader>dn :windo set nodiff<CR>

" CTRL-U in insert mode deletes a lot. Use CTRL-G u (break undo sequence,
" start new change), so that you can undo CTRL-U after in normal mode.
inoremap <C-U> <C-G>u<C-U>
" Same for CTRL-W (which deletes previous word).
inoremap <C-W> <C-G>u<C-W>

" Toggles wrapping on and off.
nnoremap <leader>w :set wrap!<CR>

" Trim trailing whitespaces.
nnoremap <silent> <leader>W :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>
    \ :nohl<CR>

" Closes buffer and deletes it bringing next buffer to current window.
nnoremap <leader>q :Bclose<CR>
nnoremap <leader>Q :Bclose!<CR>

" Fast access to begin and end of line.
nnoremap H ^
nnoremap L $

nnoremap <leader>1 1gt

" Writes buffer and closes/deletes it bringing next buffer to current window.
nnoremap <leader>wq :w<CR>:Bclose<CR>

" Easy access to quickfix functionality.
nnoremap <leader>co :copen<CR>
nnoremap <leader>cc :cclose<CR>
nnoremap <leader>cn :cnext<CR>
nnoremap <leader>cp :cprevious<CR>

" Netrw {{{1
" ==========

" Open url between () with the OS app associated.
nmap <leader>u vi)gx

" Airline plugin config {{{1
" ==========================

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" Set powerline simbols.
let g:airline_powerline_fonts = 1

" Set airline theme
let g:airline_theme='powerlineish'

" Enable plugin for syntastic.
let g:airline#extensions#syntastic#enabled = 1

" Enable plugin for tmux.
let g:airline#extensions#tmuxline#enabled = 1

" Sneak plugin {{{1
" =================

" To use sneak plugin press s + 2 chars (forward) or S + 2 chars (backwards)
" in normal mode to search for that 2 chars combination. To search further
" press ;

" Easymotion plugin config {{{1
" =============================

" Change the default EasyMotion shading to something more readable with Solarized
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionTarget2First Search
hi link EasyMotionTarget2Second Search
hi link EasyMotionShade Comment

" Remap easymotion prefix to <leader>s
map <leader>s <Plug>(easymotion-prefix)

" Removed ; from keys (harder to press).
let g:EasyMotion_keys='hklyuiopnm,qwertzxcvbasdgjf'
" Jump to anywhere default minus end of word.
let g:EasyMotion_re_anywhere = '\v(<.|^$)|(\l)\zs(\u)|(_\zs.)|(#\zs.)'

" Use space for word movement (Bidirectional WORD find).
" nmap <space> <Plug>(easymotion-bd-W)

" Use space for jump to anywhere.
nmap <space> <Plug>(easymotion-jumptoanywhere)
" Use leader space for line movement.
nmap <leader><space> <Plug>(easymotion-bd-jk)

" CtrlP plugin config {{{1
" ========================

" Setup some default ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}

" Use the nearest .git directory as the cwd
" This makes a lot of sense if you are working on a project that is in version
" control. It also supports works with .svn, .hg, .bzr.
let g:ctrlp_working_path_mode = 'r'

" By default CTRL + p, starts CtrlP plugin.

" Use a leader instead of the actual named binding
" nnoremap <leader>p :CtrlP<CR>

" Easy bindings for its various modes
nnoremap <leader>bb :CtrlPBuffer<CR>
nnoremap <leader>bf :CtrlP<CR>
nnoremap <leader>bm :CtrlPMixed<CR>
nnoremap <leader>br :CtrlPMRU<CR>

" NERDTree plugin config {{{1
" ===========================

" Toggles NERDTree window.
nnoremap <leader>nt :NERDTreeToggle<CR>
" Find current buffer in NERDTree
nnoremap <leader>nf :NERDTreeFind<CR>

augroup autoNERDTree
  au!
  " If NERDTree is the only buffer when you close a buffer, close vim.
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&
      \ b:NERDTreeType == "primary") | q | endif
  " Avoid easy buffer switching on the nerdtree split window.
  autocmd FileType nerdtree noremap <buffer> <leader>m <nop>
  autocmd FileType nerdtree noremap <buffer> <leader>, <nop>
  autocmd FileType nerdtree noremap <buffer> <leader>. <nop>
augroup END


" Vim-bookmarks plugin config {{{1
" ================================

" Set sign background color
highlight SignColumn ctermbg=black
" Enable automaticsaving for bookmarks
let g:bookmark_auto_save = 1
" Save bookmarks when leaving a buffer, load when entering one.
let g:bookmark_manage_per_buffer = 1
" Enable warning when clearing all bookmarks
let g:bookmark_show_warning = 1
" Automatically close bookmarks split when jumping to a bookmark.
let g:bookmark_auto_close = 1

" Next lines allow to avoid conflict with NERDTree key bindings.
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
  nnoremap mm :BookmarkToggle<CR>
  nnoremap mi :BookmarkAnnotate<CR>
  nnoremap mn :BookmarkNext<CR>
  nnoremap mp :BookmarkPrev<CR>
  nnoremap ma :BookmarkShowAll<CR>
  nnoremap mc :BookmarkClear<CR>
  nnoremap mx :BookmarkClearAll<CR>
endfunction
function! BookmarkUnmapKeys()
  unmap mm
  unmap mi
  unmap mn
  unmap mp
  unmap ma
  unmap mc
  unmap mx
endfunction
augroup autoBookmarks
  au!
  autocmd BufEnter * :call BookmarkMapKeys()
  autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()
augroup END

" GitGutter plugin config {{{1
" ============================

" Disable gitgutter default key mappings.
let g:gitgutter_map_keys = 0
" Reenable mappings just for prev/next hunk.
nnoremap [h :GitGutterPrevHunk<CR>
nnoremap ]h :GitGutterNextHunk<CR>

" IndentLines plugin config {{{1
" ==============================

let g:indentLine_char = '|'

nnoremap <leader>ig :IndentLinesToggle<CR>

" Ack and Ag plugin config {{{1
" =============================

" Highlight the searched term.
let g:ackhighlight=1

" If silver searcher (Ag) is present in the system, use it.
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"  Testing {{{1
"  ============

let maplocalleader='\\'

iabbrev waht what
iabbrev adn and
iabbrev tehn then
iabbrev @@@ jfsiclia@gmail.com
iabbrev ssig ___________________<CR>Juan Fco. Sicilia<CR>jfsicilia@gmail.com

nnoremap <leader>" viw<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>hbi'<esc>lel
vnoremap <leader>" <esc>`<i"<esc>`>la"<esc>v
vnoremap <leader>' <esc>`<i'<esc>`>la'<esc>v
inoremap jk <esc>
nnoremap <leader>t :match Error /\v.*\s+$/<CR>
nnoremap <leader>T :match none<CR>

" set noesckeys
set ttimeoutlen=100

" Motion to select next function call name.
onoremap F :<C-U>normal! f(hviw<CR>
" Motion to select next email.
onoremap in@ :<c-u>execute "normal! /\\v\\S+\\@\\S+\r:nohl\rviW"<CR>

" nnoremap <leader>gg :silent execute "grep! -R " . shellescape(expand("<cWORD>")) . " ."<cr>:copen<cr>
